from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pickle
import os
import time
import csv
import pandas as pd
from datetime import datetime, timedelta
from selenium.webdriver.chrome.service import Service

# –õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª—Å—è –Ω–∞ –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
driver = None


def get_driver():
    global driver
    if driver is None:
        # ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê –ë–†–ê–£–ó–ï–†–ê
        chrome_options = webdriver.ChromeOptions()
        chrome_options.add_experimental_option("detach", True)
        chrome_options.add_argument("--start-maximized")
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.binary_location = "/usr/bin/chromium"
        service = Service("/usr/bin/chromedriver")
        driver = webdriver.Chrome(service=service, options=chrome_options)
    return driver


# üìÅ –§–ê–ô–õ –î–õ–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –ö–£–ö
COOKIES_FILE = "cookies_for_max.pkl"


def manual_login():
    """–†—É—á–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    driver = get_driver()
    print("üîê –ù–£–ñ–ù–ê –†–£–ß–ù–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø")
    print("1. –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä–æ–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–∞–π—Ç")
    print("2. –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç")
    print("3. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Enter –∑–¥–µ—Å—å –≤ –∫–æ–Ω—Å–æ–ª–∏")
    print("=" * 50)

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
    driver.get("https://ads.telegram.org/account")
    time.sleep(2)

    # –ñ–¥–µ–º, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä—É—á–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç—Å—è
    input("–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Enter —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    save_cookies()

    print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    return True


def save_cookies():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫—É–∫–∏ –≤ —Ñ–∞–π–ª"""
    driver = get_driver()
    cookies = driver.get_cookies()
    with open(COOKIES_FILE, 'wb') as file:
        pickle.dump(cookies, file)
    print("üíæ –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª")


def load_cookies():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—É–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    driver = get_driver()
    if os.path.exists(COOKIES_FILE):
        driver.get("https://ads.telegram.org/account")
        time.sleep(2)

        with open(COOKIES_FILE, 'rb') as file:
            cookies = pickle.load(file)

            for cookie in cookies:
                try:
                    driver.add_cookie(cookie)
                except:
                    continue

        print("‚úÖ –ö—É–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        return True
    else:
        print("‚ùå –§–∞–π–ª —Å –∫—É–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –∑–∞–≥—Ä—É–∂–∞–µ–º –∫—É–∫–∏ –∏–ª–∏ –ø—Ä–æ—Å–∏–º —Ä—É—á–Ω–æ–π –ª–æ–≥–∏–Ω –∏ –¥–µ—Ä–∂–∏–º –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–º."""
    driver = get_driver()
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É–∫–∏; –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º —Ä—É—á–Ω–æ–π –≤—Ö–æ–¥
    logged_in = load_cookies()
    if not logged_in:
        manual_login()

    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–∞–±–∏–Ω–µ—Ç
    driver.get("https://ads.telegram.org/account")

    # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    time.sleep(3)

    # –ê–≤—Ç–æ–∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π "elama-856489 nudnoi.ru", —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    try:
        clic_elama_856489_nudnoi_ru("elama-856489 nudnoi.ru", timeout=60)
    except Exception:
        pass

    # –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    export_path = os.path.join(os.path.abspath(
        os.path.dirname(__file__)), "elama-856489 nudnoi.ru.xlsx")
    check_token_lifetime()
    parse_ads_table_to_excel(export_path)
    print(f"\n‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {export_path}")
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ. –û–∫–Ω–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã–º. –ó–∞–∫—Ä–æ–π—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.")
    print(f"[–§–ê–ô–õ –ì–û–¢–û–í] {export_path} –≥–æ—Ç–æ–≤ –∏ –º–æ–∂–Ω–æ —Å–∫–∞—á–∏–≤–∞—Ç—å.")
    # –î–µ—Ä–∂–∏–º —Å–∫—Ä–∏–ø—Ç –∞–∫—Ç–∏–≤–Ω—ã–º, —á—Ç–æ–±—ã –æ–∫–Ω–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª–æ—Å—å
    try:
        input("–ù–∞–∂–º–∏—Ç–µ Enter –≤ –∫–æ–Ω—Å–æ–ª–∏, —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –¥—Ä–∞–π–≤–µ—Ä –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–∫—Ä–∏–ø—Ç...")
    finally:
        # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä –æ—Å—Ç–∞–≤–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞,
        # –º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É (detach —É–∂–µ –≤–∫–ª—é—á—ë–Ω –≤—ã—à–µ).
        driver.quit()


def click_account_button(account_title: str, timeout: int = 30) -> None:
    """–û–∂–∏–¥–∞–µ—Ç –∏ –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –≤–∏–¥–∏–º–æ–º—É –∑–∞–≥–æ–ª–æ–≤–∫—É.

    –ü—Ä–∏–º–µ—Ä –∏—Å–∫–æ–º–æ–≥–æ –±–ª–æ–∫–∞:
    <div class="pr-account-button-content">
      <div class="pr-account-button-title">elama-856489 nudnoi.ru</div>
      <div class="pr-account-button-desc">Organization</div>
    </div>
    """
    driver = get_driver()
    wait = WebDriverWait(driver, timeout)

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    try:
        print("üìã –ò—â–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã...")
        accounts = driver.find_elements(
            By.CSS_SELECTOR, ".pr-account-button-title")
        print(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {len(accounts)}")
        for i, acc in enumerate(accounts):
            print(f"  {i+1}. '{acc.text}'")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
        return

    # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω—É–∂–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    xpath = (
        "//div[contains(@class,'pr-account-button-content') and .//div[contains(@class,'pr-account-button-title') and normalize-space(text())=\""
        + account_title
        + "\"]]"
    )
    try:
        elem = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))
        elem.click()
        print(f"‚úÖ –ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É: {account_title}")

        # –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ –∂–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        wait.until(EC.presence_of_element_located(
            (By.CSS_SELECTOR, ".js-ads-table-body tr")))
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç '{account_title}': {e}")
        print("üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ –∏ –∑–∞–º–µ–Ω–∏—Ç–µ –≤ –∫–æ–¥–µ")


def clic_elama_856489_nudnoi_ru(substring: str, timeout: int = 30) -> None:
    """–ö–ª–∏–∫–∞–µ—Ç –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞.

    –ò—â–µ—Ç —Å—Å—ã–ª–∫–∏-–∫–Ω–æ–ø–∫–∏ `a.pr-account-button-wrap` –∏ –∫–ª–∏–∫–∞–µ—Ç —Ç—É, —á–µ–π —Ç–µ–∫—Å—Ç
    —Å–æ–¥–µ—Ä–∂–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞). –ü–æ—Å–ª–µ –∫–ª–∏–∫–∞ –∂–¥—ë—Ç
    –ø–æ—è–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π.
    """
    driver = get_driver()
    wait = WebDriverWait(driver, timeout)

    try:
        # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã–±–æ—Ä–∞
        wait.until(EC.presence_of_all_elements_located(
            (By.CSS_SELECTOR, "a.pr-account-button-wrap")))
        buttons = driver.find_elements(
            By.CSS_SELECTOR, "a.pr-account-button-wrap")
        needle = substring.strip().lower()

        target = None
        for btn in buttons:
            try:
                full_text = btn.text.strip().lower()
                if needle in full_text:
                    target = btn
                    break
            except Exception:
                continue

        if not target:
            raise Exception(
                f"–ö–Ω–æ–ø–∫–∞ —Å –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π '{substring}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ä–µ–¥–∏ a.pr-account-button-wrap")

        # –ö–ª–∏–∫ –ø–æ —Å–∞–º–æ–π —Å—Å—ã–ª–∫–µ
        target.click()
        print(f"‚úÖ –ö–ª–∏–∫ –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É (–ø–æ–¥—Å—Ç—Ä–æ–∫–∞): {substring}")

        # –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        wait.until(EC.presence_of_element_located(
            (By.CSS_SELECTOR, ".js-ads-table-body tr")))
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ '{substring}': {e}")


def _safe_text(elem):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É."""
    try:
        if elem is None:
            return ""
        return elem.text.strip()
    except Exception:
        return ""


def check_token_lifetime() -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ—Ç –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏"""
    driver = get_driver()
    try:
        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        token_info = driver.find_elements(
            By.XPATH, "//*[contains(text(), 'token') or contains(text(), 'Token') or contains(text(), '—Ç–æ–∫–µ–Ω')]")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        cookies = driver.get_cookies()
        for cookie in cookies:
            if 'stel_dt' in cookie.get('name', '').lower() or 'token' in cookie.get('name', '').lower():
                if 'expiry' in cookie:
                    expiry_time = datetime.fromtimestamp(cookie['expiry'])
                    time_left = expiry_time - datetime.now()

                    if time_left.total_seconds() < 3600:  # –ú–µ–Ω—å—à–µ —á–∞—Å–∞
                        print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {time_left}")
                    elif time_left.total_seconds() < 86400:  # –ú–µ–Ω—å—à–µ –¥–Ω—è
                        print(f"‚ö†Ô∏è –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {time_left}")
                    else:
                        print(
                            f"‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –µ—â—ë {time_left.days} –¥–Ω–µ–π")
                    return

        print("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")


def parse_ads_table_to_excel(excel_path: str, timeout: int = 30) -> None:
    """–ü–∞—Ä—Å–∏—Ç —Ç–∞–±–ª–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Excel."""
    driver = get_driver()
    wait = WebDriverWait(driver, timeout)

    print(f"[–ü–ê–†–°–ò–ù–ì] –ñ–¥—É –ø–æ—è–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
    wait.until(EC.presence_of_element_located(
        (By.CSS_SELECTOR, ".js-ads-table-body")))

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
    rows_count = len(driver.find_elements(
        By.CSS_SELECTOR, ".js-ads-table-body tr"))
    print(f"[–ü–ê–†–°–ò–ù–ì] –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: {rows_count}")

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = [
        "Ad Title", "URL", "Views", "Opened", "Clicks", "Actions",
        "CTR", "CVR", "CPM", "CPC", "CPA", "Spent", "Budget", "Target", "Status", "Date Added",
    ]

    data_rows: list[list[str]] = []

    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º, –∞ –Ω–µ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º
    for i in range(rows_count):
        try:
            # –ö–∞–∂–¥—ã–π —Ä–∞–∑ –∏—â–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–Ω–æ–≤–æ
            rows = driver.find_elements(
                By.CSS_SELECTOR, ".js-ads-table-body tr")
            if i >= len(rows):
                break
            r = rows[i]

            tds = r.find_elements(By.CSS_SELECTOR, "td")
            if not tds:
                continue

            # 1) –ü–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ URL
            title_cell = tds[0]
            title_link = None
            url_link = None
            try:
                title_link = title_cell.find_element(
                    By.CSS_SELECTOR, ".pr-cell-title a.pr-link")
            except Exception:
                title_link = None
            try:
                url_link = title_cell.find_element(
                    By.CSS_SELECTOR, "small a[target='_blank']")
            except Exception:
                url_link = None

            ad_title = _safe_text(title_link)
            ad_url = _safe_text(url_link)

            # –î–∞–ª–µ–µ —è—á–µ–π–∫–∏ –∏–¥—É—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É –∫–∞–∫ –≤ —à–∞–ø–∫–µ
            def cell_text(idx: int) -> str:
                try:
                    cell = tds[idx]
                    link = None
                    try:
                        link = cell.find_element(By.CSS_SELECTOR, "a.pr-link")
                    except Exception:
                        link = None
                    text = _safe_text(link) or _safe_text(cell)
                    return text.replace("\n", " ").strip()
                except Exception:
                    return ""

            # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è: [0] —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–æ–∫/URL
            views = cell_text(1)
            opened = cell_text(2)
            clicks = cell_text(3)
            actions = cell_text(4)
            ctr = cell_text(5)
            cvr = cell_text(6)
            cpm = cell_text(7)
            cpc = cell_text(8)
            cpa = cell_text(9)
            spent = cell_text(10)
            budget = cell_text(11)
            target = cell_text(12)
            status = cell_text(13)
            date_added = cell_text(14)

            data_rows.append([
                ad_title, ad_url, views, opened, clicks, actions,
                ctr, cvr, cpm, cpc, cpa, spent, budget, target, status, date_added,
            ])

        except Exception as e:
            print(f"[–ü–ê–†–°–ò–ù–ì] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–æ–∫–∏ {i}: {e}")
            continue

    # –°–æ–∑–¥–∞—ë–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    df = pd.DataFrame(data_rows, columns=headers)
    df['–≠–∫—Å–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='–û–±—ä—è–≤–ª–µ–Ω–∏—è', index=False)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ä–∞–±–æ—á–µ–≥–æ –ª–∏—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        worksheet = writer.sheets['–û–±—ä—è–≤–ª–µ–Ω–∏—è']

        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        for column in worksheet.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)  # –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤
            worksheet.column_dimensions[column_letter].width = adjusted_width

    print(f"[–§–ê–ô–õ –ì–û–¢–û–í] {excel_path} –≥–æ—Ç–æ–≤ –∏ –º–æ–∂–Ω–æ —Å–∫–∞—á–∏–≤–∞—Ç—å.")
    print(
        f"[–ü–ê–†–°–ò–ù–ì] –§–∞–π–ª {excel_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(excel_path)}")


if __name__ == "__main__":
    main()
