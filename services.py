import os
import time
import json
import asyncio
import threading
from datetime import datetime
from fastapi import HTTPException
from fastapi.responses import JSONResponse
from concurrent.futures import ThreadPoolExecutor

from parsing import (
    load_cookies,
    save_cookies,
    get_driver,
    check_token_lifetime,
    parse_ads_table_to_excel,
    clic_elama_856489_nudnoi_ru,
)

from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
parsing_status = {
    "is_running": False,
    "current_task": None,
    "progress": "–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É",
    "last_update": None
}

parsing_lock = threading.Lock()


def export_path() -> str:
    return os.path.join(os.path.abspath(os.path.dirname(__file__)), "elama-856489 nudnoi.ru.xlsx")


def save_last_parsed_file(filename: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ"""
    timestamp = datetime.now().isoformat()
    with open("last_parsed.json", "w") as f:
        json.dump({"filename": filename, "timestamp": timestamp}, f)
    print(f"‚úÖ [–§–ê–ô–õ –ì–û–¢–û–í] {filename} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {timestamp}")
    print(f"üìÅ [–°–ö–ê–ß–ò–í–ê–ù–ò–ï] –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é –ø–æ /download")


def get_last_parsed_file():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ"""
    try:
        with open("last_parsed.json", "r") as f:
            data = json.load(f)
            return data["filename"]
    except:
        return None


def open_login_page(phone: str) -> None:
    driver = get_driver()
    driver.get("https://ads.telegram.org/account")
    import time
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.common.by import By
    from selenium.webdriver.common.keys import Keys

    wait = WebDriverWait(driver, 10)

    # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—å popup –∫–ª–∞–≤–∏—à–µ–π ESC (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    try:
        driver.find_element(By.TAG_NAME, "body").send_keys(Keys.ESCAPE)
        time.sleep(1)
    except Exception:
        pass

    # 1. –ö–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ "Log in to Start Advertizing"
    login_btn = wait.until(EC.element_to_be_clickable(
        (By.CSS_SELECTOR, "a.login-link")))
    driver.execute_script("arguments[0].scrollIntoView();", login_btn)
    login_btn.click()
    time.sleep(1)

    # 2. –î–æ–∂–¥–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ —Ñ–æ—Ä–º–∞ send-form —Å—Ç–∞–Ω–µ—Ç –≤–∏–¥–∏–º–æ–π (—É–±–µ—Ä—ë—Ç—Å—è –∫–ª–∞—Å—Å hide)
    wait.until(lambda d: "hide" not in d.find_element(
        By.ID, "send-form").get_attribute("class"))

    # 3. –í–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
    phone_input = wait.until(
        EC.visibility_of_element_located((By.ID, "phone-number")))
    phone_input.clear()
    phone_input.send_keys(phone)
    time.sleep(1)

    # 4. –ö–ª–∏–∫–Ω—É—Ç—å –ø–æ –∫–Ω–æ–ø–∫—É "Next" –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã send-form
    send_form = driver.find_element(By.ID, "send-form")
    next_btn = send_form.find_element(
        By.CSS_SELECTOR, "button[type='submit'].btn-link.btn-lg")
    next_btn.click()
    time.sleep(2)


def persist_cookies() -> None:
    try:
        save_cookies()
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—É–∫–∏: {e}")


def update_parsing_status(progress: str, is_running: bool = None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    with parsing_lock:
        global parsing_status
        parsing_status["progress"] = progress
        parsing_status["last_update"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        if is_running is not None:
            parsing_status["is_running"] = is_running
        print(f"üìä [–°–¢–ê–¢–£–°] {progress}")

def start_parsing_background_job_elama_856489_nudnoi_ru() -> None:
    try:
        update_parsing_status("üöÄ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ elama-856489 nudnoi.ru", True)
        print(f"üöÄ [{datetime.now().strftime('%H:%M:%S')}] –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ elama-856489 nudnoi.ru")
        
        update_parsing_status("üîê –ó–∞–≥—Ä—É–∂–∞—é –∫—É–∫–∏...")
        print("üîê [–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø] –ó–∞–≥—Ä—É–∂–∞—é –∫—É–∫–∏...")
        if not load_cookies():
            update_parsing_status("‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫—É–∫–∏", False)
            print("‚ùå [–û–®–ò–ë–ö–ê] –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫—É–∫–∏")
            return
            
        update_parsing_status("üåê –ü–æ–ª—É—á–∞—é –¥—Ä–∞–π–≤–µ—Ä...")
        print("üåê [–ë–†–ê–£–ó–ï–†] –ü–æ–ª—É—á–∞—é –¥—Ä–∞–π–≤–µ—Ä...")
        driver = get_driver()
        
        update_parsing_status("üåê –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–∫–∫–∞—É–Ω—Ç–∞...")
        print("üåê [–ë–†–ê–£–ó–ï–†] –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–∫–∫–∞—É–Ω—Ç–∞...")
        driver.get("https://ads.telegram.org/account")
        
        update_parsing_status("‚è≥ –ñ–¥—É –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        print("‚è≥ [–û–ñ–ò–î–ê–ù–ò–ï] –ñ–¥—É –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
        time.sleep(3)

        # –ê–≤—Ç–æ–∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç "elama-856489 nudnoi.ru"
        update_parsing_status("üéØ –ò—â—É –∫–Ω–æ–ø–∫—É –∞–∫–∫–∞—É–Ω—Ç–∞...")
        try:
            clic_elama_856489_nudnoi_ru("elama-856489 nudnoi.ru", timeout=60)
            update_parsing_status("‚úÖ –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞")
            print("‚úÖ [–ö–õ–ò–ö] –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞")
        except Exception as e:
            update_parsing_status(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É: {e}")
            print(f"‚ùå [–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É: {e}")

        update_parsing_status("‚è∞ –ü—Ä–æ–≤–µ—Ä—è—é –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞...")
        print("‚è∞ [–ü–†–û–í–ï–†–ö–ê] –ü—Ä–æ–≤–µ—Ä—è—é –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞...")
        check_token_lifetime()

        update_parsing_status("üìä –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...")
        print("üìä [–ü–ê–†–°–ò–ù–ì] –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...")
        filename = "elama-856489 nudnoi.ru.xlsx"
        parse_ads_table_to_excel(filename)
        
        update_parsing_status("üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–∞–π–ª...")
        save_last_parsed_file(filename)
        
        update_parsing_status("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω", False)
        print(f"‚úÖ [{datetime.now().strftime('%H:%M:%S')}] –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
        
    except Exception as e:
        update_parsing_status(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", False)
        print(f"‚ùå [–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê] {e}")
        import traceback
        print(f"‚ùå [–°–¢–ï–ö –¢–†–ï–ô–°] {traceback.format_exc()}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –æ—à–∏–±–∫–æ–π
        try:
            filename = "elama-856489 nudnoi.ru.xlsx"
            import pandas as pd
            df = pd.DataFrame([], columns=["–û—à–∏–±–∫–∞"])
            df.loc[0] = f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}"
            df['–í—Ä–µ–º—è –æ—à–∏–±–∫–∏'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='–û—à–∏–±–∫–∞', index=False)
            save_last_parsed_file(filename)
        except:
            pass

async def start_parsing_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    loop = asyncio.get_event_loop()
    with ThreadPoolExecutor() as executor:
        await loop.run_in_executor(executor, start_parsing_background_job_elama_856489_nudnoi_ru)

def get_parsing_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    with parsing_lock:
        return parsing_status.copy()


def start_parsing_rocketcars() -> None:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è RocketCars - elama-249960 RocketCarsMSK"""
    print(f"üöÄ [{datetime.now().strftime('%H:%M:%S')}] –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ RocketCars")
    if not load_cookies():
        print("‚ùå [–û–®–ò–ë–ö–ê] –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫—É–∫–∏")
        return

    print("üîê [–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø] –ó–∞–≥—Ä—É–∂–∞—é –∫—É–∫–∏...")
    driver = get_driver()
    driver.get("https://ads.telegram.org/account")
    time.sleep(3)

    print("üéØ [–ö–õ–ò–ö] –ò—â—É –∫–Ω–æ–ø–∫—É 'elama-249960 RocketCarsMSK'...")
    try:
        clic_elama_856489_nudnoi_ru("elama-249960 RocketCarsMSK", timeout=60)
        print("‚úÖ [–ö–õ–ò–ö] –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞")
    except Exception as e:
        print(f"‚ùå [–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É: {e}")

    print("‚è∞ [–ü–†–û–í–ï–†–ö–ê] –ü—Ä–æ–≤–µ—Ä—è—é –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞...")
    check_token_lifetime()

    print("üìä [–ü–ê–†–°–ò–ù–ì] –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...")
    filename = "rocketcars_export.xlsx"
    parse_ads_table_to_excel(filename)
    save_last_parsed_file(filename)


def start_parsing_buycar() -> None:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è BuyCar - Telescope / buycar_with_uss // CR_Telegram Ads"""
    print(f"üöÄ [{datetime.now().strftime('%H:%M:%S')}] –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ BuyCar")
    if not load_cookies():
        print("‚ùå [–û–®–ò–ë–ö–ê] –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫—É–∫–∏")
        return

    print("üîê [–ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø] –ó–∞–≥—Ä—É–∂–∞—é –∫—É–∫–∏...")
    driver = get_driver()
    driver.get("https://ads.telegram.org/account")
    time.sleep(3)

    print("üéØ [–ö–õ–ò–ö] –ò—â—É –∫–Ω–æ–ø–∫—É 'Telescope / buycar_with_uss // CR_Telegram Ads'...")
    try:
        clic_elama_856489_nudnoi_ru(
            "Telescope / buycar_with_uss // CR_Telegram Ads", timeout=60)
        print("‚úÖ [–ö–õ–ò–ö] –ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–∞–∂–∞—Ç–∞")
    except Exception as e:
        print(f"‚ùå [–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É: {e}")

    print("‚è∞ [–ü–†–û–í–ï–†–ö–ê] –ü—Ä–æ–≤–µ—Ä—è—é –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞...")
    check_token_lifetime()

    print("üìä [–ü–ê–†–°–ò–ù–ì] –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö...")
    filename = "buycar_export.xlsx"
    parse_ads_table_to_excel(filename)
    save_last_parsed_file(filename)


def start_parsing_coffelike() -> None:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è Coffelike - elama-126515 on_tcscoffee"""
    print(f"[{datetime.now()}] –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Coffelike")
    if not load_cookies():
        return
    driver = get_driver()
    driver.get("https://ads.telegram.org/account")
    time.sleep(3)

    try:
        clic_elama_856489_nudnoi_ru("elama-126515 on_tcscoffee", timeout=60)
    except Exception:
        pass

    check_token_lifetime()
    filename = "coffelike_export.xlsx"
    parse_ads_table_to_excel(filename)
    save_last_parsed_file(filename)
    print(f"[{datetime.now()}] –§–∞–π–ª {filename} —Å–æ–∑–¥–∞–Ω")


def start_parsing_panda28() -> None:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è Panda 28 - Telescope_SS_CR / panda_cargo_28_premium / O / 15840"""
    print(f"[{datetime.now()}] –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Panda 28")
    if not load_cookies():
        return
    driver = get_driver()
    driver.get("https://ads.telegram.org/account")
    time.sleep(3)

    try:
        clic_elama_856489_nudnoi_ru(
            "Telescope_SS_CR / panda_cargo_28_premium / O / 15840", timeout=60)
    except Exception:
        pass

    check_token_lifetime()
    filename = "panda28_export.xlsx"
    parse_ads_table_to_excel(filename)
    save_last_parsed_file(filename)
    print(f"[{datetime.now()}] –§–∞–π–ª {filename} —Å–æ–∑–¥–∞–Ω")


def start_parsing_buybox() -> None:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è BuyBox - Telescope_SS_CR / BuyBox_China_premium / O / 15339"""
    print(f"[{datetime.now()}] –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ BuyBox")
    if not load_cookies():
        return
    driver = get_driver()
    driver.get("https://ads.telegram.org/account")
    time.sleep(3)

    try:
        clic_elama_856489_nudnoi_ru(
            "Telescope_SS_CR / BuyBox_China_premium / O / 15339", timeout=60)
    except Exception:
        pass

    check_token_lifetime()
    filename = "buybox_export.xlsx"
    parse_ads_table_to_excel(filename)
    save_last_parsed_file(filename)
    print(f"[{datetime.now()}] –§–∞–π–ª {filename} —Å–æ–∑–¥–∞–Ω")


def start_parsing_colife() -> None:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è Colife Invest - elama-489613 investcolife RE"""
    print(f"[{datetime.now()}] –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Colife Invest")
    if not load_cookies():
        return
    driver = get_driver()
    driver.get("https://ads.telegram.org/account")
    time.sleep(3)

    try:
        clic_elama_856489_nudnoi_ru("elama-489613 investcolife RE", timeout=60)
    except Exception:
        pass

    check_token_lifetime()
    filename = "colife_export.xlsx"
    parse_ads_table_to_excel(filename)
    save_last_parsed_file(filename)
    print(f"[{datetime.now()}] –§–∞–π–ª {filename} —Å–æ–∑–¥–∞–Ω")
